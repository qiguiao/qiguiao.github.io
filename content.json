{"meta":{"title":"齐贵奥","subtitle":"jaket.qi is a web developer","description":"齐贵奥的博客","author":"齐贵奥","url":"http://yoursite.com"},"pages":[{"title":"","date":"2018-04-27T11:36:56.551Z","updated":"2018-04-27T11:36:56.550Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"title: 关于我 我姓名： 齐贵奥 &amp;&amp; Jaket 职业： web前端开发工程师 自我评价: 深度互联网从业人员，对互联网保持高度的敏感性和关注度，熟悉开发流程，有很强的 学习能力、需求分析、设计思路，有良好的语言沟通能力 和良好的逻辑能力和团队协作能力。 技术栈主修：javascript，Html,Larval。 爱好：vue，react，web3，weex，san，angular，kitty。 擅长：小程序，Jquery，reactMobile。 兴趣：github，掘金，简书，Stack Overflow。 项目经验 励步电子发票(小程序) 小程序quickStart模板为底层开发。 Promise封装wx.request()请求数据。 scroll-views实现页面下拉刷新，es6解构渲染。 wx.downloadFile()下载合同PDF，保存在手机，及时打开。 wx.addCard()插件微信卡包，保存卡券。 微信服务推送告知用户开票成功。 发票合同管理 webpack+es7+react 搭建底层框架。 react-saga中间件异步操作，请求数据。 redux状态管理机制保存状态，状态提升。 andt UI框架开发项目，拆分组件，修改组件。 封装ICon，TeacherList，Link，必备组件。 testArea搭配正则计算字数，（空格不计数，换行不计数，满50行禁止输入）"},{"title":"Tags","date":"2018-04-27T12:13:59.000Z","updated":"2018-04-27T12:14:09.918Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"微信小程序封装wx.request()请求","slug":"微信小程序封装request","date":"2018-04-28T06:21:47.453Z","updated":"2018-04-28T06:22:10.433Z","comments":true,"path":"2018/04/28/微信小程序封装request/","link":"","permalink":"http://yoursite.com/2018/04/28/微信小程序封装request/","excerpt":"","text":"先封装common方便域名更改 12345module.exports = &#123; requestPath: \"https:\", //开发 ， 测试 ，生产 ，域名都可以 apisPath: \"https:\", ossImgPath: \"http:\"&#125;; 封装server.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152var config = require('../common/config.js');module.exports = &#123; request: function (params) &#123; var signinStorage = wx.getStorageSync('signinStorage') || &#123;&#125;; var url = (params.apis ? config.apisPath : config.requestPath) + params.url; return new Promise((resolve, reject) =&gt; &#123; wx.request(&#123; url: url, //仅为示例，并非真实的接口地址 data: params.data || &#123;&#125;, method: params.method || 'GET', header: &#123; 'content-type': 'application/json', // 'X-ECAPI-Authorization':\"bearer \"+signinStorage.token || '', 'Authorization': \"bearer \" + signinStorage.token || '' &#125;, success: function (res) &#123; if (res.data.error_code == 10001) &#123; var pages = getCurrentPages(); var currentPages = pages[pages.length - 1]; var path = currentPages.route.replace('pages/', '../'); var opt = ''; if (currentPages.options) &#123; for (var k in currentPages.options) &#123; opt += '_a_' + k + '_e_' + currentPages.options[k]; &#125; &#125; // _a_ &amp; // _e_ = // _q_ ? if (opt) &#123; opt = opt.replace('_a_', '') path += '_q_' + opt; &#125; // wx.redirectTo(&#123; // url:'../login/login?done='+path // &#125;) wx.navigateTo(&#123; url: '../login/login?done=' + path &#125;) return; &#125; else &#123; resolve(res.data) &#125; &#125; &#125;) &#125;) &#125;, mobileTest: /^1\\d&#123;10&#125;$/, changeConsignee: function () &#123; &#125;&#125; 调用 12345678910111213var services = require('../services/services.js');services.request(&#123; url:'api/aa/aa', //api method:'POST', //请求方式 data:&#123; page: this.data.page //传入参数 &#125;, &#125;).then((data)=&gt;&#123; // 返回值 &#125;) 说明 利用Promise封装请求\b,引入地址方便\b更换。 调用方式简单，无需过多操作。","categories":[],"tags":[]},{"title":"React封装Picker，适用于Mobile","slug":"React封装Picker","date":"2018-04-28T06:21:47.449Z","updated":"2018-04-28T06:09:18.000Z","comments":true,"path":"2018/04/28/React封装Picker/","link":"","permalink":"http://yoursite.com/2018/04/28/React封装Picker/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import React from 'react';import &#123; Picker &#125; from 'antd-mobile';export default class DatePicker extends React.Component &#123; state=&#123; data:[] &#125; componentDidMount()&#123; let &#123; value &#125; = this.props; if(value) this.setState(&#123;value&#125;); this.init() &#125; init=()=&gt;&#123; //当前年月日 let date = new Date(), data=[]; let year = date.getFullYear(); let month = date.getMonth() + 1; let day = date.getDate(); // 放入一个数组 let value = [year,month,day,1]; // 获取年月 for(let i=year-1;i&lt;=year+1;i++)&#123; let year_data = &#123;label:i,value:i,children:[]&#125;; for(let j=1;j&lt;=12;j++)&#123; year_data.children.push(&#123;label:j,value:j&#125;); &#125; // 装入数组 data.push(year_data); &#125; // 调用方法 let datas = this.get_days(data, value); this.setState(&#123;data:datas.data,value:datas.value&#125;); &#125; get_days=(data=[],value=[])=&gt;&#123; let f_index = -1, s_index = value[1]-1; data.map((e, i)=&gt;&#123; if(e.value===value[0]) f_index = i; return e; &#125;); if(value[0] &amp;&amp; value[1])&#123; if(!data[f_index].children[s_index].children)&#123; let len = new Date(value[0], value[1], 0).getDate(); data[f_index].children[s_index].children=[]; for(let i=1;i&lt;=len;i++)&#123; data[f_index].children[s_index].children.push(&#123; label:i, value:i, children:[&#123; label: '00:00-12:00', value: '00:00-12:00', &#125;, &#123; label: '12:00-17:00', value: '12:00-17:00', &#125;, &#123; label: '17:00-24:00', value: '17:00-24:00', &#125;] &#125;); &#125; &#125; &#125; return &#123;data,value, cur_month_days:data[f_index].children[s_index].children&#125; &#125; onPickerChange=(v)=&gt;&#123; let &#123; value, data &#125; = this.state; if(value[0]!==v[0]||value[1]!==v[1])&#123; if(value[0]!==v[0]) v[1] = value[1]; let datas = this.get_days(data, v); if(value[2]) v[2]=datas.cur_month_days[value[2]-1]?value[2]:datas.cur_month_days[datas.cur_month_days.length-1].value; if(!v[2]) v[2]=1; v[3]=value[3]||1; this.setState(&#123; data:datas.data, value:v &#125;) &#125;else &#123; if(v[2]!==value[2]) v[3] = value[3]; this.setState(&#123; value:v &#125;) &#125; &#125; render() &#123; let &#123; data &#125; = this.state, &#123; children, onOk &#125; = this.props; return( &lt;Picker data=&#123;data&#125; cols=&#123;4&#125; title=\"Calendar\" cascade=&#123;true&#125; extra=\"请选择(可选)\" okText=\"Done\" dismissText=\"Close\" value=&#123;this.state.value&#125; onPickerChange=&#123;this.onPickerChange&#125; onOk=&#123;v =&gt; onOk(v)&#125; className=\"date_picker\" &gt; &#123;children&#125; &lt;/Picker&gt; ) &#125;&#125; 调用 123import DatePicker from 'component/DatePicker';&lt;DatePicker onOk=&#123;(v) =&gt; console.log(v)&#125;&gt;&lt;/DatePicker&gt;console.log(v) v是 年 月 日 时 说明 \b适用于ReactMobile，选取时间。 如果要进行时间加减换算，需注意，安卓和ios有兼容问题, 安卓可识别2018-04-29 和 2018/04/29, ios识别 2018/04/29, 根据情况可采取 v.replace(/-/g,”/“);","categories":[],"tags":[]},{"title":"React封装Icon","slug":"React封装Icon","date":"2018-04-28T06:21:47.446Z","updated":"2018-04-28T06:15:26.000Z","comments":true,"path":"2018/04/28/React封装Icon/","link":"","permalink":"http://yoursite.com/2018/04/28/React封装Icon/","excerpt":"","text":"123456789101112131415161718import React from 'react';import &#123; Icon &#125; from 'antd-mobile';export default class RIcon extends React.Component &#123; render()&#123; let props = this.props; let isIconfont = /^ifont-/.test(props.type); const iconComponent = isIconfont?( &lt;i className=&#123;`ifont $&#123;props.type&#125; $&#123;props.spin?'anticon-spin':''&#125; $&#123;props.className&#125;`&#125; onClick=&#123;props.onClick&#125; style=&#123;&#123;...props.style, fontSize: `$&#123;props.size || 14&#125;px`, color: props.color &#125;&#125;&gt;&lt;/i&gt; ):( &lt;Icon title=&#123;props.title||''&#125; type=&#123;props.type&#125; spin=&#123;props.spin&#125; onClick=&#123;props.onClick&#125; className=&#123;props.className&#125; style=&#123;&#123;...props.style, fontSize: `$&#123;props.size || 14&#125;px`, color: props.color&#125;&#125; /&gt; ) return( iconComponent ) &#125;&#125;` 1234调用import Icon from '../../componen/Icon';&lt;Icon tyep=”home“/&gt; 说明 适用于 reactMobile，在antdMobile原有基础改善。 修改为引入为 antd 也可适用于 PC。 封装icon组件，方便调用 只需即可调用。","categories":[],"tags":[]},{"title":"HTML问题综述","slug":"HTTP，HTML问题综述","date":"2018-04-28T06:21:47.425Z","updated":"2018-04-28T06:16:20.000Z","comments":true,"path":"2018/04/28/HTTP，HTML问题综述/","link":"","permalink":"http://yoursite.com/2018/04/28/HTTP，HTML问题综述/","excerpt":"","text":"HTTP状态码及其含义• 1XX：信息状态码 o 100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息 • 2XX：成功状态码 o 200 OK 正常返回信息 o 201 Created 请求成功并且服务器创建了新的资源 o 202 Accepted 服务器已接受请求，但尚未处理 • 3XX：重定向 o 301 Moved Permanently 请求的网页已永久移动到新位置。 o 302 Found 临时性重定向。 o 303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。 o 304 Not Modified 自从上次请求后，请求的网页未修改过。 • 4XX：客户端错误 o 400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。 o 401 Unauthorized 请求未授权。 o 403 Forbidden 禁止访问。 o 404 Not Found 找不到如何与 URI 相匹配的资源。 • 5XX: 服务器错误 o 500 Internal Server Error 最常见的服务器端错误。 o 503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。 HTML语义化的理解 • 用正确的标签做正确的事情！ • html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析； • 在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的。 • 搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。 • 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解 对浏览器内核的理解 • 主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎 • 渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核 • JS引擎则：解析和执行javascript来实现网页的动态效果 • 最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎 HTML5的离线储存使用，工作原理 •在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件 • 原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示 • 如何使用： o 页面头部像下面一样加入一个manifest的属性； o 在cache.manifest文件的编写离线存储的资源 o 在离线状态时，操作window.applicationCache进行需求实现CACHE MANIFEST #v0.11 CACHE: js/app.js css/style.css NETWORK: resourse/logo.png FALLBACK: / /offline.html 描述一下 cookies，sessionStorage 和 localStorage 的区别 • cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密） • cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递 • sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存 • 存储大小： o cookie数据大小不能超过4k o sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 • 有期时间： o localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据 o sessionStorage 数据在当前浏览器窗口关闭后自动删除 o cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 WEB标准以及W3C标准是什么 •标签闭合、标签小写、不乱嵌套、使用外链css和js、结构行为表现的分离 xhtml和html有什么区别 • 一个是功能上的差别 o 主要是XHTML可兼容各大浏览器、手机以及PDA，并且浏览器也能快速正确地编译网页 • 另外是书写习惯的差别 o XHTML 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素 Doctype作用，严格模式与混杂模式如何区分 它们有何意义 • 页面被加载的时，link会同时被加载，而@imort页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载import只在IE5以上才能识别，而link是XHTML标签，无兼容问题link方式的样式的权重 高于@import的权重 • &lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 标签之前。告知浏览器的解析器， 用什么文档类型 规范来解析这个文档 • 严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行 • 在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。 DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现 Canvas和SVG有什么区别 • svg绘制出来的每一个图形的元素都是独立的DOM节点，能够方便的绑定事件或用来修改。canvas输出的是一整幅画布 • svg输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会是真和锯齿。而canvas输出标量画布，就像一张图片一样，放大会失真或者锯齿 网页验证码是干嘛的，是为了解决什么安全问题 • 区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水 • 有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试 css3有哪些新特性 • 新增各种css选择器 • 圆角 border-radius • 多列布局 • 阴影和反射 • 文字特效text-shadow • 线性渐变 CSS3新增伪类有那些 • p:first-of-type 选择属于其父元素的首个p元素的每个p 元素。 • p:last-of-type 选择属于其父元素的最后 p 元素的每个p 元素。 • p:only-of-type 选择属于其父元素唯一的 p元素的每个 p 元素。 • p:only-child 选择属于其父元素的唯一子元素的每个 p 元素。 • p:nth-child(2) 选择属于其父元素的第二个子元素的每个 p 元素。 • :after 在元素之前添加内容,也可以用来做清除浮动。 • :before 在元素之后添加内容 • :enabled • :disabled 控制表单控件的禁用状态。 • :checked 单选框或复选框被选中 异步加载JS的方式 • defer，只支持IE • async： • 创建script，插入到DOM中，加载完毕后callBack 常见web安全及防护原理 • sql注入原理 o 就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令 • 总的来说有以下几点 o 永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等 o 永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取 o 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接 o 不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息 XSS原理及防范 • Xss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点XSS防范方法 • 首先代码里对用户输入的地方和变量都需要仔细检查长度和对”&lt;”,”&gt;”,”;”,”’”等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击 XSS与CSRF有什么区别吗？ • XSS是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次CSRF攻击，受害者必须依次完成两个步骤 • 登录受信任网站A，并在本地生成Cookie • 在不登出A的情况下，访问危险网站B CSRF的防御 • 服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数 • 通过验证码的方法 设计模式 • 工厂模式： o 工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法 o 主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字 • 构造函数模式 o 使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于 o 直接将属性和方法赋值给 this对象; offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别 • offsetWidth/offsetHeight返回值包含content + padding + border，效果与e.getBoundingClientRect()相同 • clientWidth/clientHeight返回值只包含content + padding，如果有滚动条，也不包含滚动条 • scrollWidth/scrollHeight返回值包含content + padding + 溢出内容的尺寸 说说你对promise的了解 • 依照 Promise/A+ 的定义，Promise 有四种状态： o pending: 初始状态, 非 fulfilled 或 rejected. o fulfilled: 成功的操作. o rejected: 失败的操作. o settled: Promise已被fulfilled或rejected，且不是pending • 另外， fulfilled与 rejected一起合称 settled • Promise 对象用来进行延迟(deferred) 和异步(asynchronous) 计算1234567891011var promise = new Promise(function(resolve, reject) &#123; if (...) &#123; // succeed resolve(result); &#125; else &#123; // fails reject(Error(errMessage)); &#125; &#125;); • Promise 实例拥有 then 方法（具有 then 方法的对象，通常被称为thenable）。它的使用方法如下：promise.then(onFulfilled, onRejected) • 接收两个函数作为参数，一个在 fulfilled 的时候被调用，一个在rejected的时候被调用，接收参数就是 future，onFulfilled 对应resolve, onRejected对应 reject 箭头函数与普通函数的区别 • 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象 • 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误 • 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替 • 不可以使用yield命令，因此箭头函数不能用作Generator函数 未完待续。。。。。","categories":[],"tags":[]},{"title":"React封装倒计时","slug":"React封装倒计时","date":"2018-04-27T09:51:09.048Z","updated":"2018-04-28T06:20:43.790Z","comments":true,"path":"2018/04/27/React封装倒计时/","link":"","permalink":"http://yoursite.com/2018/04/27/React封装倒计时/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 //倒计时 import React from 'react';class CountDown extends React.Component&#123; state =&#123; value:'cutdown' &#125; componentDidMount () &#123; let &#123;time=\"\",event=&#123;&#125;,leaveID=\"\",value&#125; = this.props; let &#123;actions=&#123;&#125;&#125; = event; var time_end,str_time; time_end = new Date(time);//结束的时间 time_end = time_end.getTime(); //结束时间的时间戳 setInterval(show_time,1000) var that = this; function show_time() &#123; if (!time) &#123; return; &#125; var time_now, time_distance; var int_day, int_hour, int_minute, int_second; time_now = new Date(); //开始时间 time_now = time_now.getTime(); //开始时间戳 time_distance = time_end - time_now; // 结束时间戳-开始时间戳 if (time_distance &gt; 0) &#123; int_day = Math.floor(time_distance / 86400000) time_distance -= int_day * 86400000; int_hour = Math.floor(time_distance / 3600000) time_distance -= int_hour * 3600000; int_minute = Math.floor(time_distance / 60000) time_distance -= int_minute * 60000; int_second = Math.floor(time_distance / 1000) if (int_hour &lt; 10) int_hour = \"0\" + int_hour; if (int_minute &lt; 10) int_minute = \"0\" + int_minute; if (int_second &lt; 10) int_second = \"0\" + int_second; str_time = int_hour + \"hr \" + int_minute + \"min \"+\" cutdown\"; that.setState(&#123;value:str_time&#125;); value(str_time) if(int_hour==\"0\" &amp;&amp; int_minute==\"0\")&#123; actions.getWidth(&#123; leave_id: leaveID, status_type: -1 &#125;) &#125; &#125; else &#123; return; &#125; &#125; &#125; render () &#123; return ( &lt;span&gt;&#123;this.state.value&#125;&lt;/span&gt;) &#125;&#125;export default CountDown; 调用 （前提是你已经在component里面创建文件夹并有返回内容） 123import CountDown from 'component/CountDown';&lt;CountDown time=&#123;data.close_time&#125;&gt;&lt;/CountDown&gt; 说明，倒计时如果你想使用setTimeout（）, 那么就需要在生命完成函数立即调用一次，和开始进入函数之前调用一次，总共两次。如果使用setInterval（），只需要调用一次即可。倒计时插件适用于移动和PC，具体样式没有太多说明，需要自己write。倒计时插件传入参数为结束时间，默认的开始时间为当前时间。倒计时插件返回值为 时 和 分，如需要天数和秒数自行添加，代码已经呈现。","categories":[],"tags":[]},{"title":"Hello EveryBody","slug":"hello-world","date":"2018-04-27T09:46:32.805Z","updated":"2018-04-24T11:57:40.305Z","comments":true,"path":"2018/04/27/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/27/hello-world/","excerpt":"","text":"Welcome to my blog Introduce oneself to12345姓名： 齐贵奥 &amp;&amp; Jaket职业： web前端开发工程师自我评价: 深度互联网从业人员，对互联网保持高度的敏感性和关注度，熟悉开发流程，有很强的 学习能力、需求分析、设计思路，有良好的语言沟通能力和良好的逻辑能力和团队协作能力。 Technology stack 熟练使用 HTML5/CSS3 及 LESS 和 SASS 等 css 预处理器，有 bootstrap 开发经验 熟练掌插 JavaScript 语言和 JQuery 库, 熟练使用 Iscroll、Swiper 等插件 熟悉 npm、yarn 包管理工具，掌插 git，sourceTree 等分工合作代码管理工具，同步开发 熟练掌握微信小程序开发，根据官方API进项项目协作开发和管理 熟练掌插 Webpack 等自动化构建工具，封装底层常用框架 掌插 ajax、fetch、axios 等通信手段，掌握跨域手段及解决方案 熟悉 Node.js，了解 ES6，熟练使用，vue，react 框架 熟练运用 Hexo Element iview antd UI框架进行项目开发 熟悉后端语言php，熟悉后端larval框架，TP框架。 More info 掘金–Jacket_7o github–qiguiao 个人博客–jaket","categories":[],"tags":[]}]}